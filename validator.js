//NodeDog validation class. Requires no changes on your part.

// Creates a validator object.
// Param path = the path to the validation_checks.js file which contains the validation definitions that this class uses
Validator = function(path)
{
    require(path);
    
    this.properties = { };
    this.addVariableToValidate = addVariableToValidate;
    this.validate = validate;
    this.getClientSideValidationProperties = getClientSideValidationProperties;
    this.validation_checks = validation_checks;
};

// Adds a key name whose value should be validated when the validate method is called.
//Param fieldName is a string representing the key whose value should be validated
//Param validationsToPerform is an array of strings representing functions from validation_checks.js
//Param errorMessages is an array of errors associated with not passing those functions
// Ex: if validationsToPerform[0] fails, errorMessages[0] will be returned.
// Alternatively, pass a single string to errorMessages to have that error show up for all validation failures for this field
addVariableToValidate = function(fieldName,validationsToPerform,errorMessages) 
{
    if(!(errorMessages instanceof Array))
    {
    	var msg = errorMessages;
    	errorMessages = [];
    	for(var i = 0; i < validationsToPerform.length; i ++)
    	{
    		errorMessages[i] = msg;
    	}
    }
    
    this.properties[fieldName] =
	{
		validationsToPerform: validationsToPerform,
     	errorMessages: errorMessages
	};
};

//validates the map passed in, server side
// Param objectHolder is a map of keys to values where the keys are the names of the fields to validate
// and the values are the values of those fields
validate = function(objectHolder) 
{
    for(var key in this.properties)
	{
 		for(var i = 0; i < this.properties[key].validationsToPerform.length; i ++)
		{
 			funcarray = this.properties[key].validationsToPerform[i].split("(");
			funcToCall = funcarray[0];
			
			fieldVal = objectHolder[key];
			
			if(fieldVal == null)
			{
				fieldVal = "null";
			}
			
			funcarray = (fieldVal + "," + funcarray[1]).split(",");
			
			lastVal = funcarray[funcarray.length-1].split(")");
			funcarray[funcarray.length-1] = lastVal[0];

			if(!this.validation_checks[funcToCall].apply(this,funcarray))
			{
				return this.properties[key].errorMessages[i];
			}
		}
	}
	return null;
};

// returns the properties generated by the validator object to the client so the client version knows how to validate
// the value returned by this method should be outputted within a script tag to the html page that needs to validate this
// info client side
getClientSideValidationProperties = function()
{
	return "var properties = " + JSON.stringify(this.properties) + ";";
}
